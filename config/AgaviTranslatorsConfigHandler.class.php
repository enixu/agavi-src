<?php

// +---------------------------------------------------------------------------+
// | This file is part of the Agavi package.                                   |
// | Copyright (c) 2003-2006 the Agavi Project.                                |
// |                                                                           |
// | For the full copyright and license information, please view the LICENSE   |
// | file that was distributed with this source code. You can also view the    |
// | LICENSE file online at http://www.agavi.org/LICENSE.txt                   |
// |   vi: set noexpandtab:                                                    |
// |   Local Variables:                                                        |
// |   indent-tabs-mode: t                                                     |
// |   End:                                                                    |
// +---------------------------------------------------------------------------+

/**
 * AgaviTranslatorsConfigHandler allows you to define translator implementations
 * for different domains.
 *
 * @package    agavi
 * @subpackage config
 *
 * @author     Dominik del Bondio <ddb@bitxtender.com>
 * @copyright  (c) Authors
 * @since      0.11.0
 *
 * @version    $Id$
 */
class AgaviTranslatorsConfigHandler extends AgaviConfigHandler
{

	/**
	 * Execute this configuration handler.
	 *
	 * @param      string An absolute filesystem path to a configuration file.
	 * @param      string An optional context in which we are currently running.
	 *
	 * @return     string Data to be written to a cache file.
	 *
	 * @throws     <b>AgaviConfigurationException</b> on error in the config.
	 *
	 * @author     Dominik del Bondio <ddb@bitxtender.com>
	 * @since      0.11.0
	 */
	public function execute($config, $context = null)
	{
		$configurations = $this->orderConfigurations(AgaviConfigCache::parseConfig($config, false, $this->getValidationFile())->configurations, AgaviConfig::get('core.environment'), $context);

		$translatorData = array();

		$defaultDomain = '';

		foreach($configurations as $cfg) {
			$defaultDomain = $cfg->getAttribute('default_domain');
			if(isset($cfg->translators)) {
				foreach($cfg->translators as $translator) {
					$domain = $translator->getAttribute('domain');
					if(!isset($translatorData[$domain])) {
						$translatorData[$domain] = array('type' => $translator->getAttribute('type'), 'params' => array());
					}
					$translatorData[$domain]['type'] = $translator->getAttribute('type', $translatorData[$domain]['type']);
					$translatorData[$domain]['params'] = $this->getItemParameters($translator, $translatorData[$domain]['params']);
				}
			}
		}

		$data = array();

		$data[] = sprintf('$this->defaultDomain = %s;', var_export($defaultDomain, true));

		foreach($translatorData as $domain => $translator) {
			$type = $translator['type'];
			$params = $translator['params'];

			$iface = $type;

			if(!class_exists($iface) && class_exists(sprintf('Agavi%sTranslator', ucfirst($iface)))) {
				$iface = sprintf('Agavi%sTranslator', ucfirst($iface));
			} else {
				$err = sprintf('The translator for the domain specifies an unknown translator "%s" for the domain "%s"', $type, $domain);
				throw new AgaviConfigurationException($err);
			}

			$data[] = sprintf('$this->translators[%s] = new %s();', var_export($domain, true), $iface);
			$data[] = sprintf('$this->translators[%s]->initialize($this->getContext(), %s);', var_export($domain, true), var_export($params, true));
		}


		// compile data
		$retval = "<?php\n" .
							"// auto-generated by ".__CLASS__."\n" .
							"// date: %s GMT\n%s\n?>";
		$retval = sprintf($retval, gmdate('m/d/Y H:i:s'), implode("\n", $data));

		return $retval;

	}

}

?>