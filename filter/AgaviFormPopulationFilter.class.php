<?php

// +---------------------------------------------------------------------------+
// | This file is part of the Agavi package.                                   |
// | Copyright (c) 2003-2006 the Agavi Project.                                |
// |                                                                           |
// | For the full copyright and license information, please view the LICENSE   |
// | file that was distributed with this source code. You can also view the    |
// | LICENSE file online at http://www.agavi.org/LICENSE.txt                   |
// |   vi: set noexpandtab:                                                    |
// |   Local Variables:                                                        |
// |   indent-tabs-mode: t                                                     |
// |   End:                                                                    |
// +---------------------------------------------------------------------------+

/**
 * AgaviFormPopulationFilter automatically populates a form that is re-posted,
 * which usually happens when a View::INPUT is returned again after a POST 
 * request because an error occured during validation.
 * That means that developers don't have to fill in request parameters into
 * form elements in their templates anymore. Text inputs, selects, radios, they
 * all get set to the value the user selected before submitting the form.
 * If you would like to set default values, you still have to do that in your
 * template. The filter will recognize this situation and automatically remove
 * the default value you assigned after receiving a POST request.
 * This filter only works with POST requests, and compares the form's URL and
 * the requested URL to decide if it's appropriate to fill in a specific form
 * it encounters while processing the output document sent back to the browser.
 * Since this form is executed very late in the process, it works independently
 * of any template language.
 *
 * <b>Optional parameters:</b>
 *

 * # <b>cdata_fix</b> - [true] - Fix generated CDATA delimiters in script and 
 *                               style blocks.
 * # <b>error_class</b>'- "error"'- The class name that is assigned to form 
 *                                  elements which didn't pass validation and 
 *                                  their labels.
 * # <b>force_output_mode</b> - [false] - If false, the output mode (XHTML or 
 *                                        HTML) will be auto-detected using the 
 *                                        document's DOCTYPE declaration. Set 
 *                                        this to "html" or "xhtml" to force 
 *                                        one of these output modes explicitly.
 * # <b>include_hidden_inputs</b> - [false]'- If hidden input fields should be 
 *                                            re-populated.
 * # <b>include_password_inputs</b> - [false] - If password input fields should 
 *                                              be re-populated.
 * # <b>remove_xml_prolog</b> - [true] - If the XML prolog generated by DOM 
 *                                       should be removed (existing ones will 
 *                                       remain untouched).
 *
 * @package    agavi
 * @subpackage filter
 *
 * @author     David Zuelke <dz@bitxtender.com>
 * @copyright  (c) Authors
 * @since      0.11.0
 *
 * @version    $Id$
 */
class AgaviFormPopulationFilter extends AgaviFilter implements AgaviIGlobalFilter, AgaviIActionFilter
{
	/**
	 * Execute this filter.
	 *
	 * @param      AgaviFilterChain The filter chain.
	 *
	 * @throws     <b>AgaviFilterException</b> If an error occurs during execution.
	 *
	 * @author     David Zuelke <dz@bitxtender.com>
	 * @since      0.11.0
	 */
	public function executeOnce(AgaviFilterChain $filterChain, AgaviResponse $response)
	{
		$filterChain->execute($filterChain, $response);
		
		$outputTypes = $this->getParameter('output_types');
		if(is_array($outputTypes) && !in_array($this->getContext()->getController()->getOutputType(), $outputTypes)) {
			return;
		}
		
		$req = $this->getContext()->getRequest();
		
		$populate = $req->getAttribute('populate', 'org.agavi.filter.FormPopulationFilter');
		if(!(is_array($populate) || ($populate instanceof AgaviParameterHolder) || (in_array($req->getMethod(), $this->getParameter('methods')) && $populate !== false))) {
			return;
		}
		
		if(is_array($populate)) {
			$p = new AgaviParameterHolder($populate);
		} elseif($populate instanceof AgaviParameterHolder) {
			$p = $populate;
		} else {
			$p = $req;
		}
		
		$output = $response->getContent();
		
		$doc = new DOMDocument();
		$doc->loadHTML($output);
		
		$encoding = strtolower($doc->encoding);
		$utf8 = $encoding == 'utf-8';
		if(!$utf8 && $encoding != 'iso-8859-1' && !function_exists('iconv')) {
			throw new AgaviException('No iconv module available, input encoding "' . $encoding . '" cannot be handled.');
		}
		
		$xhtml = (strtolower($this->getParameter('force_output_mode')) == 'xhtml' || ($doc->doctype && stripos($doc->doctype->publicId, '-//W3C//DTD XHTML') === 0 && strtolower($this->getParameter('force_output_mode')) != 'html'));
		
		$hasXmlProlog = false;
		if(preg_match('#<\?xml.*?\?>#iU' . ($utf8 ? 'u' : ''), $output)) {
			$hasXmlProlog = true;
		}
		$xpath = new DomXPath($doc);
		$baseHref = '';
		foreach($xpath->query('//head/base[@href]') as $base) {
			$baseHref = parse_url($base->getAttribute('href'));
			$baseHref = $baseHref['path'];
			break;
		}
		foreach($xpath->query('//form[@action]') as $form) {
			$action = $form->getAttribute('action');
			if(!($baseHref . $action == $_SERVER['REQUEST_URI'] || $baseHref . '/' . $action == $_SERVER['REQUEST_URI'] || (strpos($action, '/') === 0 && $action == $_SERVER['REQUEST_URI']) || (strlen($_SERVER['REQUEST_URI']) == strrpos($_SERVER['REQUEST_URI'], $action) + strlen($action)))) {
				continue;
			}
			
			// build the XPath query
			$query = 'descendant::textarea[@name] | descendant::select[@name] | descendant::input[@name and not(@type)] | descendant::input[@name and @type="text"] | descendant::input[@name and @type="checkbox"] | descendant::input[@name and @type="radio"] | descendant::input[@name and @type="password"]';
			if($this->getParameter('include_hidden_inputs')) {
				$query .= ' | descendant::input[@name and @type="hidden"]';
			}

			foreach($xpath->query($query, $form) as $element) {
				
				$name = $element->getAttribute('name');
				if(!$utf8) {
					if($encoding == 'iso-8859-1') {
						$name = utf8_decode($name);
					} else {
						$name = iconv('UTF-8', $encoding, $name);
					}
				}
				
				// there's an error with the element's name in the request? good. let's give the baby a class!
				if($req->hasError($name)) {
					$element->setAttribute('class', preg_replace('/\s*$/', ' ' . $this->getParameter('error_class'), $element->getAttribute('class')));
					// assign the class to all implicit labels
					foreach($xpath->query('ancestor::label[not(@for)]', $element) as $label) {
						$label->setAttribute('class', preg_replace('/\s*$/', ' ' . $this->getParameter('error_class'), $label->getAttribute('class')));
					}
					if(($id = $element->getAttribute('id')) != '') {
						// assign the class to all explicit labels
						foreach($xpath->query('descendant::label[@for="' . $id . '"]', $form) as $label) {
							$label->setAttribute('class', preg_replace('/\s*$/', ' ' . $this->getParameter('error_class'), $label->getAttribute('class')));
						}
					}
				}
				
				if($braces = strpos($name, '[]') !== false && ($braces != strlen($name) -3 && $element->nodeName != 'select')) {
					// auto-generated index, we can't populate that
					continue;
				}
				
				$value = $p->getParameter($name);
				
				if(is_array($value) && $element->nodeName != 'select') {
					// name didn't match exactly. skip.
					continue;
				}
				
				if(!$utf8) {
					if($encoding == 'iso-8859-1') {
						if(is_array($value)) {
							$value = array_map('utf8_encode', $value);
						} else {
							$value = utf8_encode($value);
						}
					} else {
						if(is_array($value)) {
							foreach($value as &$val) {
								$val = iconv($encoding, 'UTF-8', $val);
							}
						} else {
							$value = iconv($encoding, 'UTF-8', $value);
						}
					}
				}
				
				if($element->nodeName == 'input') {
					
					if(!$element->hasAttribute('type') || $element->getAttribute('type') == 'text' || $element->getAttribute('type') == 'hidden') {
						
						// text inputs
						$element->removeAttribute('value');
						if($p->hasParameter($name)) {
							$element->setAttribute('value', $value);
						}
						
					} elseif($element->getAttribute('type') == 'checkbox' || $element->getAttribute('type') == 'radio') {
						
						// checkboxes and radios
						$element->removeAttribute('checked');
						if($p->hasParameter($name) && (($element->hasAttribute('value') && $element->getAttribute('value') == $value) || (!$element->hasAttribute('value') && $p->getParameter($name)))) {
							$element->setAttribute('checked', 'checked');
						}
						
					} elseif($element->getAttribute('type') == 'password') {
						
						// passwords
						$element->removeAttribute('value');
						if($this->getParameter('include_password_inputs') && $p->hasParameter($name)) {
							$element->setAttribute('value', $value);
						}
					}
					
				} elseif($element->nodeName == 'select') {
					$multiple = $element->hasAttribute('multiple');
					// select elements
					// yes, we still use XPath because there could be OPTGROUPs
					foreach($xpath->query('descendant::option', $element) as $option) {
						$option->removeAttribute('selected');
						if($p->hasParameter($name) && ($option->getAttribute('value') == $value || ($multiple && is_array($value) && in_array($option->getAttribute('value'), $value)))) {
							$option->setAttribute('selected', 'selected');
						}
					}
					
				} elseif($element->nodeName == 'textarea') {
					
					// textareas
					foreach($element->childNodes as $cn) {
						// remove all child nodes (= text nodes)
						$element->removeChild($cn);
					}
					// append a new text node
					if($xhtml) {
						$element->appendChild($doc->createCDATASection($value));
					} else {
						$element->appendChild($doc->createTextNode($value));
					}
				}
				
			}
		}
		if($xhtml) {
			// workaround for a bug in dom or something that results in two xmlns attributes being generated for the <html> element
			foreach($xpath->query('//html') as $html) {
				$html->removeAttribute('xmlns');
			}
			$out = $doc->saveXML();
			if($this->getParameter('cdata_fix')) {
				// these are ugly fixes so inline style and script blocks still work. better don't use them with XHTML to avoid trouble
				$out = preg_replace('#<style([^>]*)>\s*<!\[CDATA\[#iU' . ($utf8 ? 'u' : ''), '<style\\1><!--/*--><![CDATA[/*><!--*/', $out);
				$out = preg_replace('#\]\]></style>#iU' . ($utf8 ? 'u' : ''), '/*]]>*/--></style>', $out);
				$out = preg_replace('#<script([^>]*)>\s*<!\[CDATA\[#iU' . ($utf8 ? 'u' : ''), '<script\\1><!--//--><![CDATA[//><!--', $out);
				$out = preg_replace('#\]\]></script>#iU' . ($utf8 ? 'u' : ''), '//--><!]]></script>', $out);
			}
			if($this->getParameter('remove_xml_prolog') && !$hasXmlProlog) {
				// there was no xml prolog in the document before, so we remove the one generated by DOM now
				$out = preg_replace('#<\?xml.*?\?>\s+#iU' . ($utf8 ? 'u' : ''), '', $out);
			} else {
				// yes, DOM sucks and inserts another XML prolog _after_ the DOCTYPE... and it has two question marks at the end, not one, don't ask me why
				$out = preg_replace('#<\?xml.*?\?\?>\s+#iU' . ($utf8 ? 'u' : ''), '', $out);
			}
			$response->setContent($out);
		} else {
			$response->setContent($doc->saveHTML());
		}
	}

	/**
	 * Initialize this filter.
	 *
	 * @param      AgaviContext The current application context.
	 * @param      array        An associative array of initialization parameters.
	 *
	 * @throws     <b>AgaviFilterException</b> If an error occurs during initialization
	 *
	 * @author     David Zuelke <dz@bitxtender.com>
	 * @since      0.11.0
	 */
	public function initialize(AgaviContext $context, $parameters = array())
	{
		// set defaults
		$this->setParameter('cdata_fix', true);
		$this->setParameter('error_class', 'error');
		$this->setParameter('force_output_mode', false);
		$this->setParameter('include_password_inputs', false);
		$this->setParameter('include_hidden_inputs', true);
		$this->setParameter('remove_xml_prolog', true);
		$this->setParameter('methods', array());
		$this->setParameter('output_types', null);
		
		// initialize parent
		parent::initialize($context, $parameters);
		
		$this->setParameter('methods', (array) $this->getParameter('methods'));
	}
}

?>